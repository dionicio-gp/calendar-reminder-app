{"version":3,"sources":["components/Modal/styles.js","hooks/useModal.js","components/Form/index.js","constants/cities.js","components/Calendar/styles.js","utils/date.js","utils/calendar.js","components/Calendar/Day/index.js","components/Calendar/Week/index.js","components/Calendar/Month/index.js","components/Calendar/Selectors.js","components/Calendar/CalendarSlice.js","components/Calendar/index.js","App.js","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["ModalWrapper","styled","div","Backdrop","ModalHeader","useModal","defaultState","useState","diplayModal","setDiplayModal","closeHandler","openHandler","Modal","children","backgroundColor","style","display","title","onClick","ReminderSchema","yup","shape","description","required","min","max","username","time","matches","date","cityName","color","options","map","v","label","value","EmptyReminderData","city","weather","type","imgSource","defaultSubmitHandler","ReminderForm","currentDate","submitHandler","initialData","defaultValues","useForm","validationSchema","register","handleSubmit","control","errors","watch","onSubmit","data","name","placeholder","autoComplete","maxLength","ref","pattern","as","ReactSelect","isClearable","maxMenuHeight","menuPlacement","CalendarWrapper","table","DayName","th","MonthWrapper","tbody","WeekWrapper","tr","DayWrapper","props","nodate","ActionButtons","DayHeader","DayNumber","isCurrentDay","Reminders","AddButton","button","DeleteButton","fontSize","padding","span","extractMonthDate","dateToExtract","month","year","getPreviousMonth","prevMonthDateObj","moment","subtract","findLastDaysFromMonth","monthNumber","daysToFind","firstMonthDayDate","lastMonthDay","endOf","lastMonthDays","index","push","reverse","React","memo","day","showModalReminder","removeReminders","dateNumber","isFromCurrentMonth","className","weekDays","key","Month","currentMonth","currentYear","formattedeekDaysRows","monthDayStructure","isLoopingCurrentMonth","weekRow","formatWeekDaysRows","numberOfWeeksToInclude","numberOfDaysInWeek","firstMonthDayDateObj","firstDayOfMonth","lastDayDateOfMonth","previousMonth","previousMonthYear","lastDaysDateOfPrevMonth","monthDaysStructure","i","currentDateToAdd","isFirstWeekRow","j","length","islastDayOfMonth","getCalendarDays","wIndex","calendarSelector","state","calendar","selectMonth","createSelector","items","selectYear","reminders","createReminder","createAsyncThunk","a","Promise","reject","initialState","createSlice","reducers","extraReducers","pending","fulfilled","action","payload","rejected","WeekDays","daysName","weekdays","dayName","Calendar","useSelector","openModal","useCallback","Form","App","Boolean","window","location","hostname","match","PersistConfig","storage","blacklist","appReducer","combineReducers","persistReducer","rootReducer","rootPersistConfig","middlewares","thunk","persistedReducer","store","configureStore","reducer","middleware","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a390838.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ModalWrapper = styled.div`\n\tposition: absolute;\n\ttop: 22.5vh;\n\tleft: 37.5vw;\n\twidth: 18vw;\n\tmax-height: 50vh;\n\toverflow-y: auto;\n\toverflow-x: hidden;\n\tpadding: 2.5vh 1.5vw 5vh;\n\tbackground-color: white;\n\tz-index: 3;\n\tborder-radius: 4px;\n\tbox-shadow: 3px 4px 7px -1px rgba(0, 0, 0, 0.75);\n\t-webkit-box-shadow: 3px 4px 7px -1px rgba(0, 0, 0, 0.75);\n\t-moz-box-shadow: 3px 4px 7px -1px rgba(0, 0, 0, 0.75);\n\tanimation-duration: 10s;\n`;\n\nexport const Backdrop = styled.div`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100vw;\nheight: 100vh;\nz-index: 2;\nbackground-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalHeader = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\n.modalHeader button {\n\tfont-size: 0.8em;\n\tbackground-color: white;\n\tborder: 0.5px solid lightgray;\n\tborder-radius: 2px;\n}\n\n.modalHeader button:hover {\n\tcursor: pointer;\n\tfont-weight: bold;\n\tcolor: white;\n\tbackground-color: #2e75b3;\n}\n`;\n\n","import React, { useState } from \"react\";\n\nimport { ModalWrapper, Backdrop, ModalHeader } from \"components/Modal/styles.js\";\n\nconst useModal = (defaultState = false) => {\n  const [diplayModal, setDiplayModal] = useState(defaultState);\n\n  const closeHandler = () => setDiplayModal(false);\n  const openHandler = () => setDiplayModal(true);\n  const Modal = ({ children, backgroundColor = \"#5797ef\" }) => {\n    return (\n      <>\n        <ModalWrapper style={{backgroundColor , display: diplayModal ? 'block' :'none'}}>\n          <ModalHeader >\n            <button title=\"Close\" onClick={closeHandler}>\n              x\n            </button>\n          </ModalHeader>\n          {children}\n        </ModalWrapper>\n        <Backdrop onClick={closeHandler} style={{display: diplayModal ? 'block' :'none'}} />\n      </>\n    );\n  };\n  return [Modal, openHandler, closeHandler];\n};\n\nexport default useModal;\n","import React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport ReactSelect from \"react-select\";\nimport cityOptions from 'constants/cities';\n\nconst ReminderSchema = yup.object().shape({\n  description: yup.string().required().min(3).max(30),\n  username: yup.string().required(),\n  time: yup.string().required().matches(`[0-9]{2}:[0-9]{2}`),\n  date: yup.date().required(),\n  cityName: yup.string().required(),\n  color: yup.string().required(),\n});\n\nconst options = cityOptions.map(v => ({\n  label: v,\n  value: v\n}));\n\nconst EmptyReminderData = {\n\tdescription: \"\",\n\ttime: \"\",\n\tdate: \"\",\n\tcity: { value: \"Chicago\", label: \"Chicago\" },\n\tbackgroundColor: \"#ffffff\",\n\tweather: {\n\t\ttype: \"\",\n\t\timgSource: \"\"\n\t}\n};\nconst defaultSubmitHandler = ()=>{};\n\nconst ReminderForm = ({ currentDate, submitHandler = defaultSubmitHandler, initialData = {} }) => {\n\n  const defaultValues = {...EmptyReminderData, ...initialData};\n  const { register, handleSubmit, errors, watch, control } = useForm({\n    defaultValues,\n    validationSchema: ReminderSchema\n  });\n\n\tconst onSubmitHandler = data => {\n    submitHandler(data);\n\t};\n\n\treturn (\n\t\t<form  onSubmit={handleSubmit(onSubmitHandler)}>\n      <fieldset>\n      <label>Description : </label>\n\t\t\t<input\n\t\t\t\tname=\"description\"\n\t\t\t\tplaceholder=\"Your description.....\"\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\tmaxLength=\"30\"\n\t\t\t\trequired\n        ref={register}\n        />\n      </fieldset>\n      <fieldset>\n      <label>Time : </label>\n\t\t\t<input\n\t\t\t\tname=\"time\"\n\t\t\t\ttype=\"time\"\n\t\t\t\tplaceholder=\"e.g. 15:33\"\n\t\t\t\tpattern=\"[0-9]{2}:[0-9]{2}\"\n\t\t\t\trequired\n        ref={register}\n        />\n      </fieldset>\n      <fieldset>\n      <label>Date : </label>\n\t\t\t<input\n\t\t\t\tname=\"date\"\n\t\t\t\ttype=\"date\"\n\t\t\t\tplaceholder=\"eg. 2020-03-24\"\n\t\t\t\tpattern=\"\\d{4}-\\d{2}-\\d{2}\"\n\t\t\t\trequired\n        ref={register}\n\t\t\t/>\n      </fieldset>\n      <fieldset>\n        <label>City : </label>\n            <Controller\n              as={ReactSelect}\n              options={options}\n              name=\"city\"\n              isClearable\n              control={control}\n              maxMenuHeight={220}\n              menuPlacement=\"auto\"\n            />\n         </fieldset>\n      <fieldset>\n      <label>\t\tBackground Color : </label>\n\t\t\t<input\n\t\t\t\tname=\"bgColor\"\n\t\t\t\ttype=\"color\"\n\t\t\t\trequired\n        ref={register}\n        />\n      </fieldset>\n\t\t\t<button type=\"submit\" >\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t);\n};\n\nexport default ReminderForm;\n","export default  [\"New York City\", \"Chicago\", \"Houston\", \"Phoenix\", \"Philadelphia\", \"Seattle\"];\n","import styled from \"styled-components\"\n\nexport const CalendarWrapper = styled.table`\n\tmargin: 0 auto;\n\tborder-collapse: collapse;\n`;\n\nexport const DayName = styled.th`\n\tpadding: 0.5vh 2vw;\n\tcolor: #feffff;\n\tborder: 1px solid #2e75b3;\n\tbackground-color: #2e75b3;\n\tfont-weight: bold;\n`;\n\n\nexport const MonthWrapper = styled.tbody`\n`;\n\nexport const WeekWrapper = styled.tr`\n`;\n\nexport const DayWrapper = styled.div`\n  min-height: 7.5rem;\n  font-size: 1.1rem;\n  flex: 1;\n  border-radius: 3px;\n  background-color: ${props =>\n    props.nodate ? 'rgba(27, 20, 100, .2)' : '#ecf0f1'};\n  margin: 2px;\n  position: relative;\n`;\n\nexport const ActionButtons = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\nexport const DayHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nexport const DayNumber = styled.div`\n  margin-left: 5px;\n  color: ${props =>\n    props.isCurrentDay ? '#f85050' : '#000000'}\n`;\n\n\nexport const header = styled.div`\n  color: ${props =>\n    props.isCurrentDay ? '#f85050' : '#000000'};\n`;\n\nexport const Reminders = styled.div`\n  position: absolute;\n  top: 30%;\n  left: 0;\n  padding: 2px;\n  width: 100%;\n`;\n\n\nexport const AddButton = styled.button`\n  background-color: #1b1464;\n  border-radius: 50%;\n  font-size: 1.5rem;\n  height: 28px;\n  margin: 0 2px;\n  width: 26px;\n  color: #fff;\n  cursor: pointer;\n  transition: opacity 0.3s ease-out;\n  display: flex;\n  border: none;\n  opacity: 0.3;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const DeleteButton = styled(AddButton)`\n  background-color: #f85050;\n`;\n\nexport const Reminder = styled.div`\n  cursor: pointer;\n  font-size: ${({ fontSize }) => (fontSize ? `${fontSize}rem` : `1.1rem`)};\n  background-color: ${props => props.color};\n  color: #ecf0f1;\n  border-radius: 3px;\n  padding: 4px;\n  margin-bottom: 1px;\n  ${props => (props.padding ? `padding: ${props.padding}rem` : null)};\n`;\n\nexport const ReminderText = styled.span``;\n","import moment from \"moment\";\n\nexport const extractMonthDate = (dateToExtract) => ({\n\tmonth: dateToExtract.month() + 1,\n\tyear: dateToExtract.year()\n});\n\nexport const getPreviousMonth = (month, year) => {\n\tconst prevMonthDateObj = moment(`${year}/${month}/01`, \"YYYY-MM-DD\").subtract(1, \"month\");\n\tconst prevMonthDate = extractMonthDate(prevMonthDateObj);\n\n\treturn prevMonthDate;\n};\n\nexport const getNextMonth = (month, year) => {\n\tconst nextMonthDateObj = moment(`${year}/${month}/01`, \"YYYY-MM-DD\").add(1, \"month\");\n\tconst nextMonthDate = extractMonthDate(nextMonthDateObj);\n\n\treturn nextMonthDate;\n};\nexport const getDate = (day,month, year) => {\n\treturn moment(`${year}/${month}/${day}`, \"YYYY-M-D\").format(\"DD-MM-YYYY\");\n};\n","import moment from \"moment\";\n\nimport { getPreviousMonth, getNextMonth} from \"./date\";\nexport const findLastDaysFromMonth = (monthNumber, year, daysToFind) => {\n\tconst firstMonthDayDate = `${year}/${monthNumber}/01`;\n\tconst lastMonthDay = moment(firstMonthDayDate, \"YYYY-MM-DD\")\n\t\t.endOf(\"month\")\n\t\t.date();\n\tconst lastMonthDays = [];\n\n\tfor (let index = 0; index < daysToFind; index++) {\n\t\tlastMonthDays.push(lastMonthDay - index);\n\t}\n\n\treturn lastMonthDays.reverse();\n};\n\nexport const getCalendarDays = (month, year, numberOfWeeksToInclude = 5) => {\n\tconst numberOfDaysInWeek = 7;\n\tconst firstMonthDayDateObj = moment(`${year}/${month}/01`, \"YYYY-MM-DD\");\n\tconst firstDayOfMonth = firstMonthDayDateObj.day();\n\tconst lastDayDateOfMonth = firstMonthDayDateObj.endOf(\"month\").date();\n\tconst { month: previousMonth, year: previousMonthYear } = getPreviousMonth(month, year);\n\t// fill up the spaces that are before the first day of the month\n\tconst lastDaysDateOfPrevMonth = findLastDaysFromMonth(previousMonth, previousMonthYear, firstDayOfMonth);\n  const monthDaysStructure = [];\n\n\tfor (let i = 0, currentDateToAdd = 1; i < numberOfWeeksToInclude; i++) {\n\t\tconst isFirstWeekRow = i === 0;\n\t\tconst weekRow = isFirstWeekRow ? [...lastDaysDateOfPrevMonth] : [];\n\n\t\tfor (let j = weekRow.length; j < numberOfDaysInWeek; j++) {\n\t\t\tconst islastDayOfMonth = currentDateToAdd === lastDayDateOfMonth;\n\n\t\t\tweekRow.push(currentDateToAdd);\n\t\t\t//fill up the spaces that are after the last day of the month\n\t\t\tcurrentDateToAdd = islastDayOfMonth ? 1 : currentDateToAdd + 1;\n\t\t}\n\n\t\tmonthDaysStructure.push(weekRow);\n\t}\n\n\treturn monthDaysStructure;\n};\n\n// Adds the isFromCurrentMonth property to each date, used to tell if it is part of the month in display\nexport const formatWeekDaysRows = (monthDayStructure) => {\n\tlet isLoopingCurrentMonth = false;\n\tconst formattedMonthDaysRows = monthDayStructure.map(weekRow => {\n\t\tconst formattedWeekRow = weekRow.map(dateNumber => {\n\t\t\tconst isStartingAMonth = dateNumber === 1;\n\t\t\tlet formattedDate;\n\t\t\tif (isStartingAMonth) isLoopingCurrentMonth = !isLoopingCurrentMonth;\n\n\t\t\tformattedDate = { dateNumber, isFromCurrentMonth: isLoopingCurrentMonth };\n\t\t\treturn formattedDate;\n\t\t});\n\n\t\treturn formattedWeekRow;\n\t});\n\n\treturn formattedMonthDaysRows;\n};\n","import React from \"react\";\nimport moment from \"moment\";\nimport {\n  DayWrapper,\n  AddButton,\n  DeleteButton,\n  Reminders,\n  DayHeader,\n  DayNumber,\n  ActionButtons,\n  Reminder\n} from \"components/Calendar/styles\";\n\nconst Day = ({day, showModalReminder, removeReminders }) => {\n\treturn (\n    <td>\n      <DayWrapper>\n        <DayHeader>\n          <DayNumber>\n          {day.dateNumber}\n          </DayNumber>\n          {day.isFromCurrentMonth && (\n            <ActionButtons>\n              <AddButton\n                onClick={() => showModalReminder(day)}\n                className='action-button'>\n                &#43;\n              </AddButton>\n              <DeleteButton\n                onClick={() => showModalReminder(day)}\n                className='action-button'>\n                -\n              </DeleteButton>\n            </ActionButtons>\n            )}\n        </DayHeader>\n          {day.isFromCurrentMonth && (\n          <Reminders>\n          </Reminders>\n        )}\n      </DayWrapper>\n    </td>\n\t);\n};\n\nexport default React.memo(Day);\n","import React from \"react\";\nimport { WeekWrapper } from \"components/Calendar/styles\";\nimport Day from \"components/Calendar/Day\";\n\nconst Week = ({weekDays, showModalReminder}) => {\n\nconst removeReminders = () => {\n\n}\n\n\treturn (\n\t\t<WeekWrapper>\n      {\n        weekDays.map((day, index) =>\n          <Day\n            day={day}\n            key={`week-${index}-day-${day}}`}\n            removeReminders={removeReminders}\n            showModalReminder={showModalReminder}\n          />)\n      }\n\t\t</WeekWrapper>\n\t);\n};\n\nexport default React.memo(Week);\n","import React from \"react\";\nimport { MonthWrapper } from \"components/Calendar/styles\";\nimport { getCalendarDays, formatWeekDaysRows } from \"utils/calendar\";\nimport Week from \"components/Calendar/Week\";\n\nconst Month = ({currentMonth, currentYear, showModalReminder }) => {\n  const weekDaysRows = getCalendarDays(currentMonth, currentYear);\n  const formattedeekDaysRows = formatWeekDaysRows(weekDaysRows);\n\n\treturn (\n\t\t<MonthWrapper>\n      {\n        formattedeekDaysRows.map((weekDays, wIndex) => (\n          <Week weekDays={weekDays} key={`week-${wIndex}`} showModalReminder={showModalReminder}/>\n        ))\n      }\n\t\t</MonthWrapper>\n\t);\n};\n\nexport default Month;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst calendarSelector = state => state.calendar;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.organization.value)`\nconst selectMonth = createSelector(\n    calendarSelector,\n    items => items.month\n);\n\nconst selectYear = createSelector(\n    calendarSelector,\n    items => items.year\n);\n\nconst selectReminders = createSelector(\n  calendarSelector,\n  items => items.reminders\n);\n\nexport {\n  selectMonth,\n  selectYear,\n  selectReminders,\n};\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport moment from \"moment\";\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const createReminder = createAsyncThunk(\n    \"calendar/createReminder\",\n    async (data) => {\n        try {\n            return { data };\n        } catch (err) {\n            Promise.reject(err);\n        }\n    }\n);\n\nconst  initialState = {\n  reminders: [],\n  year: moment().year(),\n  month: (moment().month() + 1),\n}\n\nexport const calendar = createSlice({\n    name: \"calendar\",\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [createReminder.pending]: state => {},\n        [createReminder.fulfilled]: (state, action) => {\n            state.reminders = [...state.reminders, action.payload.data];\n        },\n        [createReminder.rejected]: state => {},\n    }\n});\n\nexport default calendar.reducer;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport useModal from \"hooks/useModal.js\";\nimport Form from \"components/Form\";\n\nimport { CalendarWrapper, DayName } from \"./styles\";\nimport Month from \"./Month\";\nimport { selectMonth, selectYear} from \"./Selectors\";\nimport { createReminder } from \"./CalendarSlice\";\n\nconst WeekDays = () => {\n\tconst daysName = moment.weekdays();\n\treturn (\n\t\t<thead>\n\t\t\t<tr>{daysName.map((dayName) =>\n        <DayName key={dayName}>\n          {dayName}\n        </DayName>)}\n      </tr>\n\t\t</thead>\n\t);\n};\n\nconst Calendar = ({}) => {\n  const month = useSelector(selectMonth);\n  const year = useSelector(selectYear);\n\n  const [Modal, openModal] = useModal(false);\n\n    const showModalReminder = React.useCallback(() =>{\n      openModal();\n    },[]);\n\treturn (\n    <>\n\t\t<CalendarWrapper>\n\t\t\t<WeekDays />\n      <Month currentMonth={month} currentYear={year} showModalReminder={showModalReminder} />\n\t\t</CalendarWrapper>\n      <Modal>\n          <Form></Form>\n      </Modal>\n</>\n\t);\n};\n\nexport default Calendar;\n","import React from 'react';\nimport './App.css';\nimport Calendar from \"components/Calendar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1 className=\"title\"> Calendar Reminder App</h1>\n     <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport Calendar from \"components/Calendar/CalendarSlice\";\n\nconst PersistConfig = {\n  key: 'calendar',\n  storage: storage,\n  blacklist: []\n}\n\nconst appReducer = combineReducers({\n  calendar: persistReducer(PersistConfig, Calendar),\n});\n\nconst rootReducer = (state, action) => {\n  return appReducer(state, action)\n}\n\nexport default rootReducer;\n","import { configureStore, } from \"@reduxjs/toolkit\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport rootReducer from './reducer';\n\nconst rootPersistConfig = {\n  key: 'root',\n  storage: storage,\n};\n\nconst middlewares = [thunk];\n\nconst persistedReducer = persistReducer(rootPersistConfig, rootReducer);\n\nlet store = configureStore({\n  reducer: persistedReducer,\n  middleware: middlewares\n});\n\nlet persistor = persistStore(store);\n\nexport {\n  store,\n  persistor,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}