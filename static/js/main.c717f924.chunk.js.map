{"version":3,"sources":["components/Modal/styles.js","hooks/useModal.js","utils/reminder.js","components/Form/index.js","constants/cities.js","components/Calendar/styles.js","utils/date.js","utils/calendar.js","components/Calendar/CalendarSlice.js","components/Calendar/Selectors.js","components/Calendar/Day/index.js","components/Calendar/Week/index.js","components/Calendar/Month/index.js","constants/emptyReminder.js","components/Calendar/index.js","App.js","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["ModalWrapper","styled","div","Backdrop","ModalHeader","useModal","defaultState","useState","diplayModal","setDiplayModal","closeHandler","openHandler","Modal","children","style","display","marginBottom","title","onClick","removeElementById","elementId","elements","filter","element","id","sortRemindersByTime","reminders","sort","firstReminder","secondReminder","time","split","join","extractWeatherData","weatherResponse","weatherData","weather","weatherType","main","weatherIconId","icon","type","imgSource","getWheatherByCityName","cityName","a","url","fetch","then","res","json","Promise","reject","citySchema","yup","shape","label","value","ReminderSchema","description","required","min","max","username","matches","date","city","color","options","map","v","ReminderForm","submitHandler","initialData","deleteHandler","defaultValues","useForm","validationSchema","register","handleSubmit","watch","errors","control","cityWatcher","useEffect","getWeatherInfo","name","response","wheather","setWeatherInfo","weatherInfo","onSubmit","data","placeholder","autoComplete","maxLength","ref","pattern","htmlFor","as","ReactSelect","isClearable","maxMenuHeight","menuPlacement","marginLeft","CalendarWrapper","table","DayName","th","MonthWrapper","tbody","WeekWrapper","tr","DayWrapper","props","nodate","ActionButtons","DayHeader","DayNumber","isCurrentDay","Reminders","AddButton","button","DeleteButton","Reminder","fontSize","padding","span","extractMonthDate","dateToExtract","month","year","findLastDaysFromPreviusMonth","monthNumber","daysToFind","firstMonthDayDate","lastMonthDays","startDate","stopDate","dateArray","currentDate","moment","push","format","add","getDatesArray","subtract","createReminder","createAsyncThunk","editReminder","removeReminder","clearReminders","nextMonth","previusMonth","initialState","calendar","createSlice","reducers","extraReducers","pending","state","fulfilled","action","newReminders","reminder","remindersCopy","JSON","parse","stringify","reminderDate","currentDateReminders","addReminder","payload","rejected","prevReminder","updatedReminder","remindersAfterUpdate","elementToAdd","prevReminderDate","currentReminderDate","isUpdatingDate","prevDateReminders","updatedPrevDateReminders","updatedCurrentDateReminders","concat","udpatedElement","updateElementById","updateReminder","deleteReminder","cleared","deleteAllReminders","nextMonthDateObj","getNextMonth","prevMonthDateObj","getPreviousMonthAndYear","calendarSelector","selectMonth","createSelector","items","selectYear","selectReminders","React","memo","day","showModalReminder","dispatch","useDispatch","allReminders","useSelector","cardinalNumber","newReminder","dateReminders","overflowYy","overflowX","className","length","item","bgColor","weekDays","key","currentMonth","currentYear","weekDaysRows","numberOfWeeksToInclude","numberOfDaysInWeek","firstMonthDayDateObj","firstDayOfMonth","lastDayDateOfMonth","endOf","lastDaysDateOfPrevMonth","monthDaysStructure","currentDateToAdd","weekRowIndex","isFirstWeekRow","weekRow","j","islastDayOfMonth","getCalendarDays","wIndex","backgroundColor","WeekDays","daysName","weekdays","dayName","Months","months","Calendar","EmptyReminder","selectedReminder","setselectedReminder","openModal","closeModal","useCallback","justifyContent","Form","uuid","App","Boolean","window","location","hostname","match","PersistConfig","storage","blacklist","appReducer","combineReducers","persistReducer","rootReducer","rootPersistConfig","middlewares","thunk","persistedReducer","store","configureStore","reducer","middleware","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c717f924.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ModalWrapper = styled.div`\n\tposition: absolute;\n\ttop: 22.5vh;\n\tleft: 37.5vw;\n\twidth: 18vw;\n\tmax-height: 50vh;\n\toverflow-y: auto;\n\toverflow-x: hidden;\n\tpadding: 2.5vh 1.5vw 5vh;\n\tbackground-color: white;\n\tz-index: 3;\n\tborder-radius: 4px;\n\tbox-shadow: 3px 4px 7px -1px rgba(0, 0, 0, 0.75);\n\t-webkit-box-shadow: 3px 4px 7px -1px rgba(0, 0, 0, 0.75);\n\t-moz-box-shadow: 3px 4px 7px -1px rgba(0, 0, 0, 0.75);\n\tanimation-duration: 10s;\n`;\n\nexport const Backdrop = styled.div`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100vw;\nheight: 100vh;\nz-index: 2;\nbackground-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalHeader = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\n.modalHeader button {\n\tfont-size: 0.8em;\n\tbackground-color: white;\n\tborder: 0.5px solid lightgray;\n\tborder-radius: 2px;\n}\n\n.modalHeader button:hover {\n\tcursor: pointer;\n\tfont-weight: bold;\n\tcolor: white;\n\tbackground-color: #2e75b3;\n}\n`;\n\n","import React, { useState } from \"react\";\n\nimport { ModalWrapper, Backdrop, ModalHeader } from \"components/Modal/styles.js\";\n\nconst useModal = (defaultState = false) => {\n  const [diplayModal, setDiplayModal] = useState(defaultState);\n\n  const closeHandler = () => setDiplayModal(false);\n  const openHandler = () => setDiplayModal(true);\n  const Modal = ({children}) => {\n    return (\n      <>\n        <ModalWrapper  style={{display: diplayModal ? 'block' :'none'}}>\n          <ModalHeader >\n            <button  style= {{ marginBottom: 10 }} title=\"Close\" onClick={closeHandler}>\n              x\n            </button>\n          </ModalHeader>\n          {children}\n        </ModalWrapper>\n        <Backdrop onClick={closeHandler} style={{display: diplayModal ? 'block' :'none'}} />\n      </>\n    );\n  };\n  return [Modal, openHandler, closeHandler];\n};\n\nexport default useModal;\n","\nexport const findById = (elementId, elements) => elements.find(element => element.id === elementId);\n\nexport const addElement = (elementToAdd, elements) => elements.concat(elementToAdd);\n\nexport const updateElementById = (elementId, udpatedElement, elements) => {\n\treturn elements.map(element => (element.id === elementId ? udpatedElement : element));\n};\n\nexport const removeElementById = (elementId, elements) => {\n\treturn elements.filter(element => element.id !== elementId);\n};\n\n\nexport const addReminder = ( reminder, reminders) => {\n  const remindersCopy = JSON.parse(JSON.stringify(reminders))\n\tconst { date: reminderDate } = reminder;\n\t// The empty array is used to initialize the value in case it is still non-existent\n\tconst currentDateReminders = remindersCopy[reminderDate] || [];\n\tlet remindersAfterUpdate = {}\n  currentDateReminders.push(reminder);\n\n  remindersAfterUpdate = {\n    ...remindersCopy,\n    [reminderDate]: sortRemindersByTime(currentDateReminders),\n  };\n\treturn remindersAfterUpdate;\n};\n\n\nexport const deleteReminder = (reminder, reminders) => {\n  const remindersCopy = JSON.parse(JSON.stringify(reminders));\n  const { date } = reminder;\n\n\tconst currentDateReminders = remindersCopy[date] || [];\n  const newReminders = removeElementById(reminder.id, currentDateReminders);\n\n  const remindersAfterUpdate = {\n    ...remindersCopy,\n    [date]: newReminders,\n  };\n\treturn remindersAfterUpdate;\n};\n\nexport const deleteAllReminders = ( date, reminders) => {\n  const remindersCopy = JSON.parse(JSON.stringify(reminders));\n  const remindersAfterUpdate = {\n    ...remindersCopy,\n    [date]: [],\n  };\n\treturn remindersAfterUpdate;\n};\n\nexport const updateReminder = (prevReminder, updatedReminder, reminders) => {\n\tconst { date: prevReminderDate } = prevReminder;\n  const { date: currentReminderDate } = updatedReminder;\n\tconst isUpdatingDate = prevReminderDate !== currentReminderDate;\n\t// The empty array is used to initialize the value in case it is still non-existent\n\tconst currentDateReminders = reminders[currentReminderDate] || [];\n\tlet remindersAfterUpdate;\n\n\tif (isUpdatingDate) {\n\t\tconst prevDateReminders = reminders[prevReminderDate];\n\t\tconst updatedPrevDateReminders = removeElementById(prevReminder.id, prevDateReminders);\n\t\tconst updatedCurrentDateReminders = addElement(updatedReminder, currentDateReminders);\n\n\t\tremindersAfterUpdate = {\n\t\t\t...reminders,\n\t\t\t[prevReminderDate]: sortRemindersByTime(updatedPrevDateReminders),\n\t\t\t[currentReminderDate]: sortRemindersByTime(updatedCurrentDateReminders)\n\t\t};\n\t} else {\n\t\tconst updatedCurrentDateReminders = updateElementById(\n\t\t\tupdatedReminder.id,\n\t\t\tupdatedReminder,\n\t\t\tcurrentDateReminders\n\t\t);\n\n\t\tremindersAfterUpdate = {\n\t\t\t...reminders,\n\t\t\t[currentReminderDate]: sortRemindersByTime(updatedCurrentDateReminders)\n\t\t};\n\t}\n\n\treturn remindersAfterUpdate;\n};\n\n\nexport const sortRemindersByTime = reminders => {\n\tconst sortedReminders = reminders.sort((firstReminder, secondReminder) => {\n\t\tconst firstReminderTimeValue = firstReminder.time.split(\":\").join(\"\");\n\t\tconst secondReminderTimeValue = secondReminder.time.split(\":\").join(\"\");\n\n\t\treturn firstReminderTimeValue - secondReminderTimeValue;\n\t});\n\n\treturn sortedReminders;\n};\n\n\nexport const extractWeatherData = weatherResponse => {\n\tconst [weatherData] = weatherResponse.weather;\n\tconst { main: weatherType, icon: weatherIconId } = weatherData;\n\tconst extractedWeatherData = {\n\t\ttype: weatherType,\n\t\timgSource: `http://openweathermap.org/img/wn/${weatherIconId}@2x.png`\n\t};\n\n\treturn extractedWeatherData;\n};\n\nexport const getWheatherByCityName = async(cityName) => {\n  const url =`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&APPID=77aade2d2d68032076448a1e5b8367a1`;\n  try {\n    return fetch(url).then(res => res.json());\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n","import React, {useEffect, useState} from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport ReactSelect from \"react-select\";\nimport cityOptions from 'constants/cities';\n\nimport { extractWeatherData, getWheatherByCityName } from 'utils/reminder';\n\nconst citySchema =  yup.object().shape({\n  label: yup.string(),\n  value: yup.string()});\n\nconst ReminderSchema = yup.object().shape({\n  description: yup.string().required().min(3).max(30),\n  username: yup.string().required(),\n  time: yup.string().required().matches(`[0-9]{2}:[0-9]{2}`),\n  date: yup.date().required(),\n  city: citySchema,\n  color: yup.string().required(),\n});\n\nconst options = cityOptions.map(v => ({\n  label: v,\n  value: v\n}));\n\n\nconst ReminderForm = ({ submitHandler, initialData = {}, deleteHandler = ()=> {} }) => {\n\n  const defaultValues = {...initialData};\n  const { register, handleSubmit, errors, watch, control } = useForm({\n    defaultValues,\n    validationSchema: ReminderSchema\n  });\n\n\tconst onSubmitHandler = data => {\n    submitHandler(data);\n\t};\nconst cityWatcher = watch('city')\n  useEffect(() => {\n    if(!!cityWatcher.label ){\n      getWeatherInfo(cityWatcher.label);\n    }\n  }, [cityWatcher.label]);\n\n  const getWeatherInfo = async (name)=>{\n    const response = await getWheatherByCityName(name);\n    const wheather = extractWeatherData(response)\n    setWeatherInfo(wheather)\n  }\n  const [weatherInfo, setWeatherInfo] = useState({type: \"Not available\"});\n\n\treturn (\n  <>\n    <div> Weather in {cityWatcher.label}: {weatherInfo.type} </div>\n\t\t<form  onSubmit={handleSubmit(onSubmitHandler)}>\n      <fieldset>\n      <label>Description : </label>\n\t\t\t<input\n\t\t\t\tname=\"description\"\n\t\t\t\tplaceholder=\"Your description.....\"\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\tmaxLength=\"30\"\n\t\t\t\trequired\n        ref={register}\n        />\n      </fieldset>\n      <fieldset>\n      <label>Time : </label>\n\t\t\t<input\n\t\t\t\tname=\"time\"\n\t\t\t\ttype=\"time\"\n\t\t\t\tplaceholder=\"e.g. 15:33\"\n\t\t\t\tpattern=\"[0-9]{2}:[0-9]{2}\"\n\t\t\t\trequired\n        ref={register}\n        />\n      </fieldset>\n      <fieldset>\n      <label>Date : </label>\n\t\t\t<input\n\t\t\t\tname=\"date\"\n\t\t\t\ttype=\"date\"\n\t\t\t\tplaceholder=\"eg. 2020-03-24\"\n\t\t\t\trequired\n        ref={register}\n\t\t\t/>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"city\">City : </label>\n\n            <Controller\n              as={ReactSelect}\n              options={options}\n              name=\"city\"\n              isClearable\n              control={control}\n              maxMenuHeight={220}\n              menuPlacement=\"auto\"\n            />\n         </fieldset>\n      <fieldset>\n      <label>\t\tBackground Color : </label>\n\t\t\t<input\n\t\t\t\tname=\"bgColor\"\n\t\t\t\ttype=\"color\"\n\t\t\t\trequired\n        ref={register}\n        />\n      </fieldset>\n\t\t\t<button\n        style={{marginLeft: 80}}\n        type=\"submit\" >\n\t\t\t\tSave\n\t\t\t</button>\n      {initialData?.id ?\n        <button\n          type=\"button\"\n         onClick={() => deleteHandler(initialData)}\n         style={{marginLeft: 80}}\n         >\n\t\t\t\tdelete\n\t\t\t</button>\n      : null}\n\n\t\t</form>\n    </>\n\t);\n};\n\nexport default ReminderForm;\n","export default  [\"New York City\", \"Chicago\", \"Houston\", \"Phoenix\", \"Philadelphia\", \"Seattle\"];\n","import styled from \"styled-components\"\n\nexport const CalendarWrapper = styled.table`\n\tmargin: 0 auto;\n\tborder-collapse: collapse;\n  table-layout: auto;\n`;\n\nexport const DayName = styled.th`\n\twidth: 160px;\n\tcolor: #feffff;\n\tborder: 1px solid #2e75b3;\n\tbackground-color: #2e75b3;\n\tfont-weight: bold;\n`;\n\n\nexport const MonthWrapper = styled.tbody`\n`;\n\nexport const WeekWrapper = styled.tr`\n`;\n\nexport const DayWrapper = styled.div`\n  min-height: 7.5rem;\n  font-size: 1.1rem;\n  flex: 1;\n  border-radius: 3px;\n  background-color: ${props =>\n    props.nodate ? 'rgba(27, 20, 100, .2)' : '#ecf0f1'};\n  margin: 2px;\n  position: relative;\n`;\n\nexport const ActionButtons = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\nexport const DayHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nexport const DayNumber = styled.div`\n  margin-left: 5px;\n  color: ${props =>\n    props.isCurrentDay ? '#f85050' : '#000000'}\n`;\n\n\nexport const header = styled.div`\n  color: ${props =>\n    props.isCurrentDay ? '#f85050' : '#000000'};\n`;\n\nexport const Reminders = styled.div`\n  position: absolute;\n  top: 30%;\n  left: 0;\n  padding: 2px;\n  width: 100%;\n`;\n\n\nexport const AddButton = styled.button`\n  background-color: #1b1464;\n  border-radius: 50%;\n  font-size: 1.5rem;\n  height: 28px;\n  margin: 0 2px;\n  width: 26px;\n  color: #fff;\n  cursor: pointer;\n  transition: opacity 0.3s ease-out;\n  display: flex;\n  border: none;\n  opacity: 0.3;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const DeleteButton = styled(AddButton)`\n  background-color: #f85050;\n`;\n\nexport const Reminder = styled.div`\n  cursor: pointer;\n  font-size: ${({ fontSize }) => (fontSize ? `${fontSize}rem` : `1.1rem`)};\n  background-color: ${props => props.color};\n  color: #ecf0f1;\n  border-radius: 3px;\n  padding: 4px;\n  margin-bottom: 1px;\n  ${props => (props.padding ? `padding: ${props.padding}rem` : null)};\n`;\n\nexport const ReminderText = styled.span``;\n","import moment from \"moment\";\n\nexport const extractMonthDate = (dateToExtract) => ({\n\tmonth: dateToExtract.month() + 1,\n\tyear: dateToExtract.year()\n});\n\nexport const getPreviousMonthAndYear = (month, year) => {\n\tconst prevMonthDateObj = moment(`${year}/${month}/01`, \"YYYY-MM-DD\").subtract(1, \"month\");\n\tconst prevMonthDate = extractMonthDate(prevMonthDateObj);\n\n\treturn prevMonthDate;\n};\n\nexport const getNextMonth = (month, year) => {\n\tconst nextMonthDateObj = moment(`${year}/${month}/01`, \"YYYY-MM-DD\").add(1, \"month\");\n\tconst nextMonthDate = extractMonthDate(nextMonthDateObj);\n\n\treturn nextMonthDate;\n};\nexport const getDate = (day,month, year) => {\n\treturn moment(`${year}/${month}/${day}`, \"YYYY-M-D\").format(\"DD-MM-YYYY\");\n};\n\nexport const getCardinalNumberOfDate = (date) => {\n\treturn moment(date, \"YYYY-MM-DD\").format(\"D\");\n};\n\nexport const formatDate = (date) => {\n\treturn moment(date, \"YYYY-MM-DD\").format();\n};\n\nexport const getDatesArray = (startDate, stopDate)=> {\n  var dateArray = [];\n  var currentDate = moment(startDate);\n  var stopDate = moment(stopDate);\n  while (currentDate <= stopDate) {\n      dateArray.push( moment(currentDate).format('YYYY-MM-DD') )\n      currentDate = moment(currentDate).add(1, 'days');\n  }\n  return dateArray;\n}\n","import moment from \"moment\";\n\nimport { getDatesArray } from 'utils/date';\n\nexport const getCalendarDays = (month, year, numberOfWeeksToInclude = 5) => {\n\tconst numberOfDaysInWeek = 7;\n\tconst firstMonthDayDateObj = moment(`${year}/${month}/01`, \"YYYY-M-DD\");\n\tconst firstDayOfMonth = firstMonthDayDateObj.day();\n  const lastDayDateOfMonth = firstMonthDayDateObj.endOf(\"month\").date();\n\t// fill up the spaces that are before the first day of the month\n\tconst lastDaysDateOfPrevMonth = findLastDaysFromPreviusMonth(month, year, firstDayOfMonth);\n  const monthDaysStructure = [];\n\n  let currentMonth = month;\n  let currentDateToAdd = 1\n    if(lastDaysDateOfPrevMonth.length){\n      currentDateToAdd = 2\n    }\n\n\tfor (let weekRowIndex = 0; weekRowIndex < numberOfWeeksToInclude; weekRowIndex++) {\n\t\tconst isFirstWeekRow = weekRowIndex === 0;\n\t\tconst weekRow = isFirstWeekRow ? [...lastDaysDateOfPrevMonth] : [];\n\n\t\tfor (let j = weekRow.length; j < numberOfDaysInWeek; j++) {\n\t\t\tconst islastDayOfMonth = currentDateToAdd === lastDayDateOfMonth;\n      const day = moment(`${year}/${currentMonth}/${currentDateToAdd}`, \"YYYY-M-D\").format(\"YYYY-MM-DD\");\n      weekRow.push(day);\n      //fill up the spaces that are after the last day of the month\n      if (islastDayOfMonth) {\n        currentDateToAdd = 1\n        currentMonth = currentMonth + 1;\n      } else{\n        currentDateToAdd = currentDateToAdd + 1;\n      }\n\t\t}\n\n\t\tmonthDaysStructure.push(weekRow);\n\t}\n\n\treturn monthDaysStructure;\n};\n\n// Adds the isFromCurrentMonth property to each date, used to tell if it is part of the month in display\nexport const formatWeekDaysRows = (monthDayStructure) => {\n\tlet isLoopingCurrentMonth = false;\n\tconst formattedMonthDaysRows = monthDayStructure.map(weekRow => {\n\t\tconst formattedWeekRow = weekRow.map(dateNumber => {\n\t\t\tconst isStartingAMonth = dateNumber === 1;\n\t\t\tlet formattedDate;\n\t\t\tif (isStartingAMonth) isLoopingCurrentMonth = !isLoopingCurrentMonth;\n\n\t\t\tformattedDate = { dateNumber, isFromCurrentMonth: isLoopingCurrentMonth };\n\t\t\treturn formattedDate;\n\t\t});\n\n\t\treturn formattedWeekRow;\n\t});\n\n\treturn formattedMonthDaysRows;\n};\n\n\n\n\nexport const findLastDaysFromPreviusMonth = (monthNumber, year, daysToFind) => {\n\n\tconst firstMonthDayDate = `${year}/${monthNumber}/01`;\n  let lastMonthDays = [];\n    if (daysToFind > 0) {\n     const startDate =  moment(firstMonthDayDate).subtract(daysToFind, 'days').format(\"YYYY-MM-DD\");\n      lastMonthDays = getDatesArray(startDate,firstMonthDayDate);\n    }\n\n\treturn lastMonthDays;\n};\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport moment from \"moment\";\n\nimport { addReminder, updateReminder, deleteAllReminders, deleteReminder } from \"utils/reminder\";\nimport { getPreviousMonthAndYear, getNextMonth } from \"utils/date\";\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const createReminder = createAsyncThunk(\n    \"calendar/createReminder\",\n    async (data) => {\n        try {\n            return { data };\n        } catch (err) {\n            Promise.reject(err);\n        }\n    }\n);\n\nexport const editReminder = createAsyncThunk(\n  \"calendar/editReminder\",\n  async (data) => {\n      try {\n          return { data };\n      } catch (err) {\n          Promise.reject(err);\n      }\n  }\n);\nexport const removeReminder = createAsyncThunk(\n  \"calendar/removeReminder\",\n  async (data) => {\n      try {\n          return { data };\n      } catch (err) {\n          Promise.reject(err);\n      }\n  }\n);\n\nexport const clearReminders = createAsyncThunk(\n  \"calendar/clearReminders\",\n  async (data) => {\n      try {\n          return { data };\n      } catch (err) {\n          Promise.reject(err);\n      }\n  }\n);\nexport const nextMonth = createAsyncThunk(\n  \"calendar/nextMonth\",\n  async () => {\n      try {\n          return {  };\n      } catch (err) {\n          Promise.reject(err);\n      }\n  }\n);\n\nexport const previusMonth = createAsyncThunk(\n  \"calendar/previusMonth\",\n  async () => {\n      try {\n          return {};\n      } catch (err) {\n          Promise.reject(err);\n      }\n  }\n);\n\nconst  initialState = {\n  reminders: {},\n  year: moment().year(),\n  month: (moment().month() + 1),\n}\n\nexport const calendar = createSlice({\n    name: \"calendar\",\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [createReminder.pending]: state => {},\n        [createReminder.fulfilled]: (state, action) => {\n          const newReminders = addReminder(action.payload.data, state.reminders )\n          state.reminders = newReminders;\n        },\n        [createReminder.rejected]: state => {},\n        [editReminder.pending]: state => {},\n        [editReminder.fulfilled]: (state, action) => {\n          const newReminders = updateReminder(action.payload.data.prevReminder,action.payload.data.updatedReminder, state.reminders)\n          state.reminders = newReminders;\n        },\n        [editReminder.rejected]: state => {},\n        [removeReminder.pending]: state => {},\n        [removeReminder.fulfilled]: (state, action) => {\n          const newReminders = deleteReminder(action.payload.data, state.reminders)\n          state.reminders = newReminders;\n        },\n        [removeReminder.rejected]: state => {},\n        [clearReminders.rejected]: state => {},\n        [clearReminders.pending]: state => {},\n        [clearReminders.fulfilled]: (state, action) => {\n          const cleared = deleteAllReminders(action.payload.data, state.reminders )\n          state.reminders = cleared;\n        },\n        [nextMonth.rejected]: state => {},\n        [nextMonth.pending]: state => {},\n        [nextMonth.fulfilled]: (state, action) => {\n          const date = getNextMonth( state.month,state.year );\n          state.year = date.year;\n          state.month = date.month;\n        },\n        [previusMonth.rejected]: state => {},\n        [previusMonth.pending]: state => {},\n        [previusMonth.fulfilled]: (state, action) => {\n          const date = getPreviousMonthAndYear( state.month,state.year );\n          state.year = date.year;\n          state.month = date.month;\n        },\n\n\n\n    }\n});\n\nexport default calendar.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst calendarSelector = state => state.calendar;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.organization.value)`\nconst selectMonth = createSelector(\n    calendarSelector,\n    items => items.month\n);\n\nconst selectYear = createSelector(\n    calendarSelector,\n    items => items.year\n);\n\nconst selectReminders = createSelector(\n  calendarSelector,\n  items => items.reminders\n);\n\nexport {\n  selectMonth,\n  selectYear,\n  selectReminders,\n};\n","import React from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { clearReminders } from \"components/Calendar/CalendarSlice\";\nimport { selectReminders } from \"components/Calendar/Selectors\";\n\nimport {\n  DayWrapper,\n  AddButton,\n  DeleteButton,\n  Reminders,\n  DayHeader,\n  DayNumber,\n  ActionButtons,\n  Reminder\n} from \"components/Calendar/styles\";\n\nimport {getCardinalNumberOfDate, formatDate } from 'utils/date';\n\n\nconst Day = ({day, showModalReminder }) => {\n  const dispatch = useDispatch();\n  const allReminders = useSelector(selectReminders)\n  const cardinalNumber = getCardinalNumberOfDate(day)\n  const newReminder ={ date: day }\n\n  const dateReminders = allReminders[day] || [];\n\n\treturn (\n    <td style={{ overflowYy: 'scroll', overflowX: 'hidden'}}>\n      <DayWrapper>\n        <DayHeader>\n          <DayNumber>\n          {cardinalNumber}\n          </DayNumber>\n            <ActionButtons>\n              <AddButton\n                onClick={() => showModalReminder(newReminder)}\n                className='action-button'>\n                &#43;\n              </AddButton>\n              { (dateReminders.length) ?\n                <DeleteButton\n                onClick={() => {dispatch(clearReminders(day))}}\n                className='action-button'>\n                -\n              </DeleteButton>\n              : null}\n\n            </ActionButtons>\n        </DayHeader>\n        <Reminders>\n          {\n            dateReminders.map(item =>\n              <Reminder\n                color={item.bgColor}\n                onClick={() => showModalReminder(item)}\n                >\n                {item.description}\n              </Reminder>)\n          }\n          </Reminders>\n      </DayWrapper>\n    </td>\n\t);\n};\n\nexport default React.memo(Day);\n","import React from \"react\";\nimport { WeekWrapper } from \"components/Calendar/styles\";\nimport Day from \"components/Calendar/Day\";\n\nconst Week = ({weekDays, showModalReminder}) => {\n\n\treturn (\n\t\t<WeekWrapper>\n      {\n        weekDays.map((day) =>\n          <Day\n            day={day}\n            key={`day-${day}}`}\n            showModalReminder={showModalReminder}\n          />)\n      }\n\t\t</WeekWrapper>\n\t);\n};\n\nexport default React.memo(Week);\n","import React from \"react\";\nimport { MonthWrapper } from \"components/Calendar/styles\";\nimport { getCalendarDays, formatWeekDaysRows } from \"utils/calendar\";\nimport Week from \"components/Calendar/Week\";\n\nconst Month = ({currentMonth, currentYear, showModalReminder }) => {\n  const weekDaysRows = getCalendarDays(currentMonth, currentYear);\n\n\treturn (\n\t\t<MonthWrapper>\n      {\n        weekDaysRows.map((weekDays, wIndex) => (\n          <Week weekDays={weekDays} key={`week-${wIndex}`} showModalReminder={showModalReminder}/>\n        ))\n      }\n\t\t</MonthWrapper>\n\t);\n};\n\nexport default React.memo(Month);\n","export default {\n  id: '',\n\tdescription: \"\",\n\ttime: \"\",\n\tdate: \"\",\n\tcity: { value: \"Chicago\", label: \"Chicago\" },\n\tbackgroundColor: \"#DB6C79\",\n};\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport useModal from \"hooks/useModal.js\";\nimport Form from \"components/Form\";\n\nimport { CalendarWrapper, DayName } from \"./styles\";\nimport Month from \"./Month\";\nimport { selectMonth, selectYear} from \"./Selectors\";\nimport { createReminder, editReminder ,removeReminder, nextMonth, previusMonth} from \"components/Calendar/CalendarSlice\";\nimport { v4 as uuid } from \"uuid\";\nimport EmptyReminder from 'constants/emptyReminder';\n\n\nconst WeekDays = () => {\n\tconst daysName = moment.weekdays();\n\treturn (\n\t\t<thead>\n\t\t\t<tr>{daysName.map((dayName) =>\n        <DayName key={dayName}>\n          {dayName}\n        </DayName>)}\n      </tr>\n\t\t</thead>\n\t);\n};\nconst Months = moment.months();\n\nconst Calendar = ({}) => {\n  const dispatch = useDispatch();\n  const month = useSelector(selectMonth);\n  const year = useSelector(selectYear);\n  const [selectedReminder, setselectedReminder] = useState(EmptyReminder);\n  const [Modal, openModal, closeModal] = useModal(false);\n\n    const showModalReminder = React.useCallback((reminder) => {\n      setselectedReminder({...EmptyReminder,...reminder})\n      openModal();\n    },[]);\n\n    const submitHandler = (data)=> {\n      let reminder = {...data, id: uuid()};\n      if(selectedReminder.id){\n        reminder = {...selectedReminder, ...data};\n        dispatch(editReminder({updatedReminder: reminder, prevReminder: selectedReminder}));\n      }else{\n      let reminder = {...data, id: uuid()}\n        dispatch(createReminder(reminder));\n      }\n      closeModal();\n      setselectedReminder(EmptyReminder);\n    }\n\n    const deleteHandler = (data) =>{\n      dispatch(removeReminder(data));\n      closeModal();\n      setselectedReminder(EmptyReminder);\n    }\n\n\n\treturn (\n    <>\n    <div style={{display: 'flex', justifyContent: 'space-around',}}>\n    <button\n      onClick={() => dispatch(nextMonth())}\n    > {\"<<\"} previusMonth</button>\n    <h1 className=\"title\">{Months[month-1]}</h1>\n    <button\n     onClick={() => dispatch(nextMonth())}\n    > nextMonth {\">>\"} </button>\n    </div>\n\t\t<CalendarWrapper>\n\t\t\t<WeekDays />\n      <Month currentMonth={month} currentYear={year} showModalReminder={showModalReminder} />\n\t\t</CalendarWrapper>\n      <Modal>\n          <Form\n            submitHandler={submitHandler}\n            initialData={selectedReminder}\n            deleteHandler={deleteHandler}\n           />\n      </Modal>\n</>\n\t);\n};\n\nexport default Calendar;\n","import React from 'react';\nimport './App.css';\nimport Calendar from \"components/Calendar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h3 className=\"title\"> Calendar Reminder App</h3>\n     <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport Calendar from \"components/Calendar/CalendarSlice\";\n\nconst PersistConfig = {\n  key: 'calendar',\n  storage: storage,\n  blacklist: []\n}\n\nconst appReducer = combineReducers({\n  calendar: persistReducer(PersistConfig, Calendar),\n});\n\nconst rootReducer = (state, action) => {\n  return appReducer(state, action)\n}\n\nexport default rootReducer;\n","import { configureStore, } from \"@reduxjs/toolkit\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport rootReducer from './reducer';\n\nconst rootPersistConfig = {\n  key: 'root',\n  storage: storage,\n};\n\nconst middlewares = [thunk];\n\nconst persistedReducer = persistReducer(rootPersistConfig, rootReducer);\n\nlet store = configureStore({\n  reducer: persistedReducer,\n  middleware: middlewares\n});\n\nlet persistor = persistStore(store);\n\nexport {\n  store,\n  persistor,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}